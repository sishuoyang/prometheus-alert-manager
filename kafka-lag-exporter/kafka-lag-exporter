#!/usr/bin/env bash

###  ------------------------------- ###
###  Helper methods for BASH scripts ###
###  ------------------------------- ###

die() {
  echo "$@" 1>&2
  exit 1
}

realpath () {
(
  TARGET_FILE="$1"
  CHECK_CYGWIN="$2"

  cd "$(dirname "$TARGET_FILE")"
  TARGET_FILE=$(basename "$TARGET_FILE")

  COUNT=0
  while [ -L "$TARGET_FILE" -a $COUNT -lt 100 ]
  do
      TARGET_FILE=$(readlink "$TARGET_FILE")
      cd "$(dirname "$TARGET_FILE")"
      TARGET_FILE=$(basename "$TARGET_FILE")
      COUNT=$(($COUNT + 1))
  done

  if [ "$TARGET_FILE" == "." -o "$TARGET_FILE" == ".." ]; then
    cd "$TARGET_FILE"
  fi
  TARGET_DIR="$(pwd -P)"
  if [ "$TARGET_DIR" == "/" ]; then
    TARGET_FILE="/$TARGET_FILE"
  else
    TARGET_FILE="$TARGET_DIR/$TARGET_FILE"
  fi

  # make sure we grab the actual windows path, instead of cygwin's path.
  if [[ "x$CHECK_CYGWIN" == "x" ]]; then
    echo "$TARGET_FILE"
  else
    echo $(cygwinpath "$TARGET_FILE")
  fi
)
}

# TODO - Do we need to detect msys?

# Uses uname to detect if we're in the odd cygwin environment.
is_cygwin() {
  local os=$(uname -s)
  case "$os" in
    CYGWIN*) return 0 ;;
    *)  return 1 ;;
  esac
}

# This can fix cygwin style /cygdrive paths so we get the
# windows style paths.
cygwinpath() {
  local file="$1"
  if is_cygwin; then
    echo $(cygpath -w $file)
  else
    echo $file
  fi
}

# Make something URI friendly
make_url() {
  url="$1"
  local nospaces=${url// /%20}
  if is_cygwin; then
    echo "/${nospaces//\\//}"
  else
    echo "$nospaces"
  fi
}

# This crazy function reads in a vanilla "linux" classpath string (only : are separators, and all /),
# and returns a classpath with windows style paths, and ; separators.
fixCygwinClasspath() {
  OLDIFS=$IFS
  IFS=":"
  read -a classpath_members <<< "$1"
  declare -a fixed_members
  IFS=$OLDIFS
  for i in "${!classpath_members[@]}"
  do
    fixed_members[i]=$(realpath "${classpath_members[i]}" "fix")
  done
  IFS=";"
  echo "${fixed_members[*]}"
  IFS=$OLDIFS
}

# Fix the classpath we use for cygwin.
fix_classpath() {
  cp="$1"
  if is_cygwin; then
    echo "$(fixCygwinClasspath "$cp")"
  else
    echo "$cp"
  fi
}
# Detect if we should use JAVA_HOME or just try PATH.
get_java_cmd() {
  # High-priority override for Jlink images
  if [[ -n "$bundled_jvm" ]];  then
    echo "$bundled_jvm/bin/java"
  elif [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]];  then
    echo "$JAVA_HOME/bin/java"
  else
    echo "java"
  fi
}

echoerr () {
  echo 1>&2 "$@"
}
vlog () {
  [[ $verbose || $debug ]] && echoerr "$@"
}
dlog () {
  [[ $debug ]] && echoerr "$@"
}
execRunner () {
  # print the arguments one to a line, quoting any containing spaces
  [[ $verbose || $debug ]] && echo "# Executing command line:" && {
    for arg; do
      if printf "%s\n" "$arg" | grep -q ' '; then
        printf "\"%s\"\n" "$arg"
      else
        printf "%s\n" "$arg"
      fi
    done
    echo ""
  }

  # we use "exec" here for our pids to be accurate.
  exec "$@"
}
addJava () {
  dlog "[addJava] arg = '$1'"
  java_args+=( "$1" )
}
addApp () {
  dlog "[addApp] arg = '$1'"
  app_commands+=( "$1" )
}
addResidual () {
  dlog "[residual] arg = '$1'"
  residual_args+=( "$1" )
}
addDebugger () {
  addJava "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$1"
}

require_arg () {
  local type="$1"
  local opt="$2"
  local arg="$3"
  if [[ -z "$arg" ]] || [[ "${arg:0:1}" == "-" ]]; then
    die "$opt requires <$type> argument"
  fi
}
is_function_defined() {
  declare -f "$1" > /dev/null
}

# Attempt to detect if the script is running via a GUI or not
# TODO - Determine where/how we use this generically
detect_terminal_for_ui() {
  [[ ! -t 0 ]] && [[ "${#residual_args}" == "0" ]] && {
    echo "true"
  }
  # SPECIAL TEST FOR MAC
  [[ "$(uname)" == "Darwin" ]] && [[ "$HOME" == "$PWD" ]] && [[ "${#residual_args}" == "0" ]] && {
    echo "true"
  }
}

# Processes incoming arguments and places them in appropriate global variables.  called by the run method.
process_args () {
  local no_more_snp_opts=0
  while [[ $# -gt 0 ]]; do
    case "$1" in
             --) shift && no_more_snp_opts=1 && break ;;
       -h|-help) usage; exit 1 ;;
    -v|-verbose) verbose=1 && shift ;;
      -d|-debug) debug=1 && shift ;;

    -no-version-check) no_version_check=1 && shift ;;

           -mem) echo "!! WARNING !! -mem option is ignored. Please use -J-Xmx and -J-Xms" && shift 2 ;;
     -jvm-debug) require_arg port "$1" "$2" && addDebugger $2 && shift 2 ;;

          -main) custom_mainclass="$2" && shift 2 ;;

     -java-home) require_arg path "$1" "$2" && jre=`eval echo $2` && java_cmd="$jre/bin/java" && shift 2 ;;

 -D*|-agentlib*|-agentpath*|-javaagent*|-XX*) addJava "$1" && shift ;;
                                         -J*) addJava "${1:2}" && shift ;;
                                           *) addResidual "$1" && shift ;;
    esac
  done

  if [[ no_more_snp_opts ]]; then
    while [[ $# -gt 0 ]]; do
      addResidual "$1" && shift
    done
  fi

  is_function_defined process_my_args && {
    myargs=("${residual_args[@]}")
    residual_args=()
    process_my_args "${myargs[@]}"
  }
}

# Actually runs the script.
run() {
  # TODO - check for sane environment

  # process the combined args, then reset "$@" to the residuals
  process_args "$@"
  set -- "${residual_args[@]}"
  argumentCount=$#

  #check for jline terminal fixes on cygwin
  if is_cygwin; then
    stty -icanon min 1 -echo > /dev/null 2>&1
    addJava "-Djline.terminal=jline.UnixTerminal"
    addJava "-Dsbt.cygwin=true"
  fi

  # check java version
  if [[ ! $no_version_check ]]; then
    java_version_check
  fi

  if [ -n "$custom_mainclass" ]; then
    mainclass=("$custom_mainclass")
  else
    mainclass=("${app_mainclass[@]}")
  fi

  # Now we check to see if there are any java opts on the environment. These get listed first, with the script able to override them.
  if [[ "$JAVA_OPTS" != "" ]]; then
    java_opts="${JAVA_OPTS}"
  fi

  # run sbt
  execRunner "$java_cmd" \
    ${java_opts[@]} \
    "${java_args[@]}" \
    -cp "$(fix_classpath "$app_classpath")" \
    "${mainclass[@]}" \
    "${app_commands[@]}" \
    "${residual_args[@]}"

  local exit_code=$?
  if is_cygwin; then
    stty icanon echo > /dev/null 2>&1
  fi
  exit $exit_code
}

# Loads a configuration file full of default command line options for this script.
loadConfigFile() {
  cat "$1" | sed $'/^\#/d;s/\r$//'
}

# Now check to see if it's a good enough version
# TODO - Check to see if we have a configured default java version, otherwise use 1.6
java_version_check() {
  readonly java_version=$("$java_cmd" -version 2>&1 | awk -F '"' '/version/ {print $2}')
  if [[ "$java_version" == "" ]]; then
    echo
    echo No java installations was detected.
    echo Please go to http://www.java.com/getjava/ and download
    echo
    exit 1
  else
    local major=$(echo "$java_version" | cut -d'.' -f1)
    if [[ "$major" -eq "1" ]]; then
     local major=$(echo "$java_version" | cut -d'.' -f2)
    fi
    if [[ "$major" -lt "6" ]]; then
      echo
      echo The java installation you have is not up to date
      echo $app_name requires at least version 1.6+, you have
      echo version $java_version
      echo
      echo Please go to http://www.java.com/getjava/ and download
      echo a valid Java Runtime and install before running $app_name.
      echo
      exit 1
    fi
  fi
}

###  ------------------------------- ###
###  Start of customized settings    ###
###  ------------------------------- ###
usage() {
 cat <<EOM
Usage: $script_name [options]

  -h | -help         print this message
  -v | -verbose      this runner is chattier
  -d | -debug        enable debug output for the launcher script
  -no-version-check  Don't run the java version check.
  -main <classname>  Define a custom main class
  -jvm-debug <port>  Turn on JVM debugging, open at the given port.

  # java version (default: java from PATH, currently $(java -version 2>&1 | grep version))
  -java-home <path>         alternate JAVA_HOME

  # jvm options and output control
  JAVA_OPTS          environment variable, if unset uses "$java_opts"
  -Dkey=val          pass -Dkey=val directly to the java runtime
  -J-X               pass option -X directly to the java runtime
                     (-J is stripped)

  # special option
  --                 To stop parsing built-in commands from the rest of the command-line.
                     e.g.) enabling debug and sending -d as app argument
                     \$ ./start-script -d -- -d

In the case of duplicated or conflicting options, basically the order above
shows precedence: JAVA_OPTS lowest, command line options highest except "--".
Available main classes:
	com.lightbend.kafkalagexporter.MainApp
EOM
}

###  ------------------------------- ###
###  Main script                     ###
###  ------------------------------- ###

declare -a residual_args
declare -a java_args
declare -a app_commands
declare -r real_script_path="$(realpath "$0")"
declare -r app_home="$(realpath "$(dirname "$real_script_path")")"
# TODO - Check whether this is ok in cygwin...
declare -r lib_dir="$(realpath "${app_home}/../lib")"
declare -a app_mainclass=(com.lightbend.kafkalagexporter.MainApp)

declare -r script_conf_file="${app_home}/../conf/application.ini"
declare -r app_classpath="$lib_dir/com.lightbend.kafkalagexporter.kafka-lag-exporter-0.8.2.jar:$lib_dir/org.scala-lang.scala-library-2.12.17.jar:$lib_dir/com.typesafe.config-1.4.2.jar:$lib_dir/org.apache.kafka.kafka_2.12-3.2.3.jar:$lib_dir/com.typesafe.akka.akka-actor_2.12-2.6.20.jar:$lib_dir/com.typesafe.akka.akka-actor-typed_2.12-2.6.20.jar:$lib_dir/com.typesafe.akka.akka-slf4j_2.12-2.6.20.jar:$lib_dir/com.typesafe.akka.akka-stream_2.12-2.6.20.jar:$lib_dir/com.typesafe.akka.akka-protobuf_2.12-2.6.20.jar:$lib_dir/com.lightbend.akka.akka-stream-alpakka-influxdb_2.12-3.0.4.jar:$lib_dir/io.fabric8.kubernetes-model-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-client-4.11.2.jar:$lib_dir/io.prometheus.simpleclient-0.15.0.jar:$lib_dir/io.prometheus.simpleclient_hotspot-0.15.0.jar:$lib_dir/io.prometheus.simpleclient_httpserver-0.15.0.jar:$lib_dir/org.scala-lang.modules.scala-java8-compat_2.12-1.0.2.jar:$lib_dir/com.typesafe.akka.akka-http_2.12-10.2.10.jar:$lib_dir/net.debasishg.redisclient_2.12-3.42.jar:$lib_dir/ch.qos.logback.logback-classic-1.4.4.jar:$lib_dir/software.amazon.msk.aws-msk-iam-auth-1.1.4.jar:$lib_dir/org.apache.kafka.kafka-clients-3.2.3.jar:$lib_dir/org.apache.kafka.kafka-server-common-3.2.3.jar:$lib_dir/org.apache.kafka.kafka-metadata-3.2.3.jar:$lib_dir/org.apache.kafka.kafka-raft-3.2.3.jar:$lib_dir/org.apache.kafka.kafka-storage-3.2.3.jar:$lib_dir/net.sourceforge.argparse4j.argparse4j-0.7.0.jar:$lib_dir/com.fasterxml.jackson.module.jackson-module-scala_2.12-2.13.3.jar:$lib_dir/com.fasterxml.jackson.dataformat.jackson-dataformat-csv-2.13.3.jar:$lib_dir/com.fasterxml.jackson.datatype.jackson-datatype-jdk8-2.13.3.jar:$lib_dir/net.sf.jopt-simple.jopt-simple-5.0.4.jar:$lib_dir/org.bitbucket.b_c.jose4j-0.7.9.jar:$lib_dir/com.yammer.metrics.metrics-core-2.2.0.jar:$lib_dir/org.scala-lang.modules.scala-collection-compat_2.12-2.6.0.jar:$lib_dir/org.scala-lang.scala-reflect-2.12.17.jar:$lib_dir/com.typesafe.scala-logging.scala-logging_2.12-3.9.4.jar:$lib_dir/io.dropwizard.metrics.metrics-core-4.1.12.1.jar:$lib_dir/org.apache.zookeeper.zookeeper-3.6.3.jar:$lib_dir/commons-cli.commons-cli-1.4.jar:$lib_dir/org.slf4j.slf4j-api-2.0.1.jar:$lib_dir/com.typesafe.akka.akka-protobuf-v3_2.12-2.6.20.jar:$lib_dir/org.reactivestreams.reactive-streams-1.0.3.jar:$lib_dir/com.typesafe.ssl-config-core_2.12-0.4.3.jar:$lib_dir/org.influxdb.influxdb-java-2.15.jar:$lib_dir/io.fabric8.kubernetes-model-core-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-rbac-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-admissionregistration-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-apps-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-autoscaling-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-apiextensions-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-batch-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-certificates-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-coordination-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-discovery-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-events-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-extensions-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-networking-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-metrics-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-policy-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-scheduling-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-settings-4.11.2.jar:$lib_dir/io.fabric8.kubernetes-model-storageclass-4.11.2.jar:$lib_dir/io.fabric8.openshift-model-4.11.2.jar:$lib_dir/javax.annotation.javax.annotation-api-1.3.2.jar:$lib_dir/javax.xml.bind.jaxb-api-2.3.0.jar:$lib_dir/com.fasterxml.jackson.module.jackson-module-jaxb-annotations-2.11.2.jar:$lib_dir/com.squareup.okhttp3.okhttp-3.13.1.jar:$lib_dir/com.squareup.okhttp3.logging-interceptor-3.13.1.jar:$lib_dir/com.fasterxml.jackson.dataformat.jackson-dataformat-yaml-2.11.2.jar:$lib_dir/com.fasterxml.jackson.datatype.jackson-datatype-jsr310-2.11.2.jar:$lib_dir/com.fasterxml.jackson.core.jackson-databind-2.13.3.jar:$lib_dir/com.fasterxml.jackson.core.jackson-core-2.13.3.jar:$lib_dir/io.fabric8.zjsonpatch-0.3.0.jar:$lib_dir/com.github.mifmif.generex-1.0.2.jar:$lib_dir/io.prometheus.simpleclient_tracer_otel-0.15.0.jar:$lib_dir/io.prometheus.simpleclient_tracer_otel_agent-0.15.0.jar:$lib_dir/io.prometheus.simpleclient_common-0.15.0.jar:$lib_dir/com.typesafe.akka.akka-http-core_2.12-10.2.10.jar:$lib_dir/org.apache.commons.commons-pool2-2.8.0.jar:$lib_dir/ch.qos.logback.logback-core-1.4.4.jar:$lib_dir/com.amazonaws.aws-java-sdk-core-1.11.986.jar:$lib_dir/com.amazonaws.aws-java-sdk-sts-1.11.986.jar:$lib_dir/software.amazon.awssdk.auth-2.17.192.jar:$lib_dir/software.amazon.awssdk.sso-2.17.192.jar:$lib_dir/software.amazon.awssdk.sts-2.17.192.jar:$lib_dir/software.amazon.awssdk.apache-client-2.17.192.jar:$lib_dir/com.github.luben.zstd-jni-1.5.2-1.jar:$lib_dir/org.lz4.lz4-java-1.8.0.jar:$lib_dir/org.xerial.snappy.snappy-java-1.1.8.4.jar:$lib_dir/org.apache.kafka.kafka-storage-api-3.2.3.jar:$lib_dir/com.thoughtworks.paranamer.paranamer-2.8.jar:$lib_dir/org.apache.zookeeper.zookeeper-jute-3.6.3.jar:$lib_dir/org.apache.yetus.audience-annotations-0.5.0.jar:$lib_dir/io.netty.netty-handler-4.1.77.Final.jar:$lib_dir/io.netty.netty-transport-native-epoll-4.1.63.Final.jar:$lib_dir/org.scala-lang.modules.scala-parser-combinators_2.12-1.1.2.jar:$lib_dir/com.squareup.retrofit2.retrofit-2.5.0.jar:$lib_dir/com.squareup.retrofit2.converter-moshi-2.5.0.jar:$lib_dir/org.msgpack.msgpack-core-0.8.16.jar:$lib_dir/io.fabric8.kubernetes-model-common-4.11.2.jar:$lib_dir/com.fasterxml.jackson.core.jackson-annotations-2.13.3.jar:$lib_dir/jakarta.xml.bind.jakarta.xml.bind-api-2.3.2.jar:$lib_dir/jakarta.activation.jakarta.activation-api-1.2.1.jar:$lib_dir/com.squareup.okio.okio-1.17.2.jar:$lib_dir/org.yaml.snakeyaml-1.26.jar:$lib_dir/dk.brics.automaton.automaton-1.11-8.jar:$lib_dir/io.prometheus.simpleclient_tracer_common-0.15.0.jar:$lib_dir/com.typesafe.akka.akka-parsing_2.12-10.2.10.jar:$lib_dir/commons-logging.commons-logging-1.2.jar:$lib_dir/org.apache.httpcomponents.httpclient-4.5.13.jar:$lib_dir/software.amazon.ion.ion-java-1.0.2.jar:$lib_dir/com.fasterxml.jackson.dataformat.jackson-dataformat-cbor-2.6.7.jar:$lib_dir/joda-time.joda-time-2.8.1.jar:$lib_dir/com.amazonaws.jmespath-java-1.11.986.jar:$lib_dir/software.amazon.awssdk.annotations-2.17.192.jar:$lib_dir/software.amazon.awssdk.utils-2.17.192.jar:$lib_dir/software.amazon.awssdk.sdk-core-2.17.192.jar:$lib_dir/software.amazon.awssdk.regions-2.17.192.jar:$lib_dir/software.amazon.awssdk.profiles-2.17.192.jar:$lib_dir/software.amazon.awssdk.http-client-spi-2.17.192.jar:$lib_dir/software.amazon.awssdk.json-utils-2.17.192.jar:$lib_dir/software.amazon.eventstream.eventstream-1.0.1.jar:$lib_dir/software.amazon.awssdk.protocol-core-2.17.192.jar:$lib_dir/software.amazon.awssdk.aws-json-protocol-2.17.192.jar:$lib_dir/software.amazon.awssdk.aws-core-2.17.192.jar:$lib_dir/software.amazon.awssdk.metrics-spi-2.17.192.jar:$lib_dir/software.amazon.awssdk.netty-nio-client-2.17.192.jar:$lib_dir/software.amazon.awssdk.aws-query-protocol-2.17.192.jar:$lib_dir/org.apache.httpcomponents.httpcore-4.4.13.jar:$lib_dir/io.netty.netty-common-4.1.77.Final.jar:$lib_dir/io.netty.netty-resolver-4.1.77.Final.jar:$lib_dir/io.netty.netty-buffer-4.1.77.Final.jar:$lib_dir/io.netty.netty-transport-4.1.77.Final.jar:$lib_dir/io.netty.netty-codec-4.1.77.Final.jar:$lib_dir/io.netty.netty-transport-native-unix-common-4.1.77.Final.jar:$lib_dir/com.squareup.moshi.moshi-1.5.0.jar:$lib_dir/commons-codec.commons-codec-1.11.jar:$lib_dir/software.amazon.awssdk.third-party-jackson-core-2.17.192.jar:$lib_dir/io.netty.netty-codec-http-4.1.77.Final.jar:$lib_dir/io.netty.netty-codec-http2-4.1.77.Final.jar:$lib_dir/io.netty.netty-transport-classes-epoll-4.1.77.Final.jar:$lib_dir/com.typesafe.netty.netty-reactive-streams-http-2.0.5.jar:$lib_dir/com.typesafe.netty.netty-reactive-streams-2.0.5.jar"

# java_cmd is overrode in process_args when -java-home is used
declare java_cmd=$(get_java_cmd)

# if configuration files exist, prepend their contents to $@ so it can be processed by this runner
[[ -f "$script_conf_file" ]] && set -- $(loadConfigFile "$script_conf_file") "$@"

run "$@"
